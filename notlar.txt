vs.code kur. nodejs ve angularcli kur
code için eklenti önerileri: angular files(sağ click component,servis oluşturma),
Bracket Pair Colorizer (kodları renklendirir) 
Path Intellicense (path yazarken yardımcı olur.)
Prettier - Code formatter
TypeScript Hero

--nodejs en yeni versiona güncellemek--
sudo npm install -g n
sudo n latest


npm install -g @angular/cli komutu ile angular kurulur
ng --version

herşey boş bir klasör açıp içine yeni proje açılarak başlıyor...cmd mkdir yeniklasör...
ng new projeadi

npm install bootstrap
angular.json dosyasını aşağıdaki şekilde güncelle.
"styles": [
  "node_modules/@angular/material/prebuilt-themes/indigo-pink.css",
  "src/styles.scss",
  "./node_modules/bootstrap/dist/css/bootstrap.css"
],

konsept komponent mantığında dönüyor. src/app içinde dönmekte.


app klasörü bir modül
index.html deki <app-root> çağırıyor
src/main.ts dosyası içinde AppModule ile tanımlıyoruz.(import {AppModule} from './app/app.module';

başlangıç modülünü belirtmek için platformBrowserDynamic olan satırda belirtiliyor
Default olarak AppModule olmakta.


index.html deki selector app.component.ts dosyasındaki selector dan belirleniyor.

YENİ COMPONENT EKLEMEK
app klasörü içine movies isimli klasör açtık.

CLI ile COMPONENT EKLEMEK
movieapp>ng generate component movie
yada kısaltması
>ng g c movie

vs.code da ctrl + shift + L yapınca kursörün olduğu metni tüm sayfada değiştirmek için seçer.

SERVİS EKLEMEK
>ng g s servisadi

DİREKTİF EKLEMEK
>ng g d direktifadi

CUSTOM PİPE EKLEMEK
>ng g pipe productFilter

https://rxjs-dev.firebaseapp.com/
ROUTE EKLEMEK
app.component.ts ye
import { Routes } from '@angular/router';



MODÜL EKLEMEK -ROUTE EKLEMEK
>ng g m moduladi --flat --module=app 
Not: Flat parametresi modülün app kökünde dosya olarak oluşmasını sağlar. Aksi halde klasör oluşturacak.
	 --module parametresi app.module.ts içine modülü import edecek.
	 
PS C:\MovieApp> ng serve --open //browserla beraber açar
ng serve --port 1111 --open diyerek istediğimiz portta açar.

örnek api servisleri
http://jsonplaceholder.typicode.com
https://jsonplaceholder.typicode.com/users

themoviedb api
81a4ae3c015507ef8ffb7b7091b46ee9
https://api.themoviedb.org/3/movie/550?api_key=81a4ae3c015507ef8ffb7b7091b46ee9

https://api.github.com/users/sadikturan
https://api.github.com/users/sadikturan/repos

Apilere bağlanmak için 
import { HttpClient } from '@angular/common/http';

npm install angular-in-memory-web-api --save
constructor(private http: HttpClient)

JSON tipinde veriyi almak için 
update(movie: Movie):Observable<any> {
    const httpOptions={
      headers: new HttpHeaders({'Content-Type':'application/json'}) //option daki şekilde kullanılır.
    }
    return this.http.put(this.apiMoviesUrl, movie, httpOptions);
}
-------------------
Browserda İleri geri vs yapmak için
import { Location } from '@angular/common'; satırı eklenir.
her hangi bir metod içinde kullanımı
save(): void {
    this.movieService.update(this.movie)
    .subscribe(()=> {
      this.location.back();  // bu satırdaki gibi kullanılır. Bir önceki sayfaya yönlendirir.
    });
  }
---------------------binding geçiştleri
https://www.c-sharpcorner.com/article/angular-one-and-two-way-data-bindings-with-examples/
property binding,class binding, style,event,keyup event binging, one way and two way binding
------one way binding 
class dan arayüze veri aktarımı
import { FormsModule } from '@angular/forms';  import et.

email = "onselaydin@gmail.com"
  onKeyUp2() {
  
      console.log(this.email);

}

<input [value]="email" (keyup.enter)="onKeyUp()"/>
--------two way binding
bu tekniği kullanmak için app.module.ts ye
import { FormsModule } from '@angular/forms';  import et.

email = "onselaydin@gmail.com"
  onKeyUp2() {
  
      console.log(this.email);

}
<input type="text" [(ngModel)]="email" (keyup)="onKeyUp2()"/>

----------------------PIPE
https://angular.io/api?type=pipe
--Gelen veriyi formatlama
title:string = 'Onsel.net';

https://github.com/angular/angular.js/tree/master/src/ngLocale
-----------------------------------------
--------DIRECTIVES------------------
https://angular.io/api?type=directive
ngIf,ngSwitch,ngFor
<div *ngIf="model.getProducts().lenght>0"></div>
ngfor bootstrap card componenti kullanabiliriz
https://getbootstrap.com/docs/4.3/components/card/

Change Detection = ngfor ile bastığımız listeye silme, ekleme olduğunda güncellenmesi.
ngTemplate = oluşturduğumuz bir ekranı başka bir yerde kullanacağımız zaman kod tekrarı olmadan eklemek içindir.
-------------------------------------
bir input text de konumlandığında focus yada ayrıldığında blur olayları gerçekleşir.
Bunları yakalamak için HostListener kullanılır.
import { Directive,HostListener } from '@angular/core';
---
@HostListener('focus') onFocus(){
	console.log('focused');
}
@HostListener('blur') onBlur(){
	console.log('blured');
}
------------------------------------------
https://www.gencayyildiz.com/blog/asp-net-core-angular-7-web-api-token-authentication-kullanimi/
--------------------------------------------
Cross için cromu aşağıdaki şekilde aç
chrome.exe --user-data-dir="C:/Chrome dev session" --disable-web-security
-------------------------------------------------
>ng test
>ng build --prod
https://www.c-sharpcorner.com/article/develop-test-and-deploy-the-angular-project-in-iis-using-angular-cli-and-visual/
yada
Build için terminal + run task + npm buildi seçip projede dist klasöründe.
index.html içini .net içindeki index.cshtml e aktarıcağız. Daha sonra olşuan klasörüdeki css js leri bir klasöre atıp
yollarını düzeltmek gerekli.
-------------------------------------------------------------------------
$("input[type=text]").keyup(function(){
  $(this).val( $(this).val().toUpperCase() );
});

$('input[type=text]').val (function () {
    return this.value.toUpperCase();
})
-----------------------------------------------

  <div class="col-11"><input id="@Model.GetElementId(alos.Web.Areas.TMS.Models.FormType.Edit, "PLATE_NO_input")" name="@Model.GetElementId(alos.Web.Areas.TMS.Models.FormType.Edit, "PLATE_NO_input")" type="text" class="k-select-full k-textbox" data-bind="value: PLATE_NO" required validationMessage=" " onchange="platecontrol($('#@Model.GetElementId(alos.Web.Areas.TMS.Models.FormType.Edit, "PLATE_NO_input")'))" /></div>
  
  https://www.oracle.com/technical-resources/articles/database/python-with-database-11g.html
  https://www.geeksforgeeks.org/oracle-database-connection-in-python/
----------------------------------
app klasörünün içine product.ts isimli dosya aç
export dışarı açmak anlamına geliyor.
export const product = [
	{ id:1, name: 'ürün 1' }
]
--------------------Parametre Route
https://www.c-sharpcorner.com/article/overview-of-route-parameters-in-angular/
app.module.ts const appRutes içinde 
{ path: 'products/:id', component: ProductComponent }
product sayfasına
import { ActivatedRoute } from '@angular/route';
contructor içine (private route: ActivatedRoute)
ngOninit içine
let id = this.route.snapshot.paramMap.get('id'); //buradaki id moduldeki route tanımındaki id.
------------------------Observable Route Param
https://www.c-sharpcorner.com/article/using-parammap-observable-for-handling-route-in-angular/
ngOninit içine
this.route.paramMap
	.subscribe(params=> {
	//console.log(params);
	let id= +params.get('id');
	this.selectedProduct = products.find(i=>i.id===id);
})

html de 
<a [routeLink]="['/products',2]">detay</a>
--------------------queryparam route
https://alligator.io/angular/query-parameters/
<a class="btn btn-primary" routerLink="/products" [queryParams]="{page:1,order: 'bestselling'}">En Çok SAtanlar</a>
-----------------------------------------------------

Form Validation için
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
constructor(private formBuilder:FormBuilder) {}
https://jasonwatmore.com/post/2019/06/14/angular-8-reactive-forms-validation-example


--Alertfyjs--
https://alertifyjs.com/
npm install alertifyjs
globaldeki style.css dosyasına import işlemi 
@import '~alertifyjs/build/css/alertify.min.css';
@import '~alertifyjs/build/css/themes/bootstrap.min.css';
angular.json tanımlaması "scripts": ["./node_modules/alertifyjs/build/alertify.min.js"]
Herhangi bir componentte importların altına

declare let alertify:any;

bir metod içinde kullanım...
addToChart(product){
  alertify.success("added")
}

Free Website Templates
https://w3layouts.com/


--json server--
restfull backend için kullanılır.
npm i json-server --save-dev
npm install -g json-server 
https://www.npmjs.com/package/json-server

publish'in bir parçası olmaması için Bunları dependencies den silip dev içine atıyoruz.
    "json-server": "^0.15.1",
    "jsonwebtoken": "^8.5.1",
Modeller için app içine model isimli bir klasör oluştur.
model içine model.modules.ts dosyası oluştur.
projenin kök klasörüne data.js dosyası oluştur...
package.json dosyası script içine 
  "json": "json-server data.js -p 3500"   // 3500 nolu portdan data.js'i restfull olarak servis etmek..
npm run json diyerek çalıştırırız.
http://localhost:3000/products?name=Lenovo
json-server --watch shop.json

--json authentication--
kimlik denetimi login işlemleri için kullanılacak...
npm i jsonwebtoken

--- login componenti oluşturmak. Lokal storage kullanımı ---
https://getbootstrap.com/docs/4.0/examples/floating-labels/
>ng g component login
Servis klasörüne bir 
>ng g service account
loggedIn = false;
login(user:User):boolean{
    if(user.userName=="onsel"&&user.password=="123456"){
      return true;
      this.loggedIn = true;
      localStorage.setItem("isLogged",user.userName);
    }
    return false;
}
isLoggedIn() {
    return this.loggedIn;
  }

  logOut(){
    localStorage.removeItem("isLogged");
    this.loggedIn = false;
  }

--CanActive Guard--
Guardlar bir servis gibi çalışır. @Injectable deklarasyonu oluşturmalıyız.
Login klasörüne login.guard.ts dosyası oluştur. example uygulamasında kodlar mevcut.
account servisindeki isLoggedIn metodunu çağırdık ve routerda korumak istediğimiz komponente parametre ekledik.

ÖNEMLİ NOT: Servisleri kullanmak istediğimizde app.module.ts ye providera eklememiz gerekmektedir.Çünkü her yerden kullanmak için.

--npm paketi kaldırma
npm uninstall <package-name>
npm u b bootstrap

https://stackoverflow.com/questions/52176881/this-version-of-cli-is-only-compatible-with-angular-version-5-0-0-or-higher-erro

Not: Bir component oluşturduğunda app.module.ts ye eklenir.
https://getbootstrap.com/docs/3.3/components/

npm install bootstrap
npm install font-awesome
style.css boostra ve font-awesome import et.
@import "~boostrap/dist/css/bootstrap.min.css";
@import "~font-awesome/css/font-awesome.min.css";

Not: export kelimesi dışarıdan erişim için gerekli. c# daki public gibidir.

--Birim Testi--
Not: Componentdeki spec.ts dosyası birim testi yapmak için kullanılır.

-- Tip Güvenli Kodlama--
Model oluşturmalıyız. örneğin componentin olduğu klasöre product.ts dosyası açılır.
export class Product {
  id:number;
  name:string;
  ...
}

--hight resulation photos--
https://unsplash.com/

An unhandled exception occurred: Port 4200 is already in use.
netstat -ano | findstr :4200
task manager pid nodejs çıktı.

-- Local ve Global servisler--
herkesin sepeti ve içindeki ürünler farklıdır. Bu  local servis oluyor.

--httpclientmodule--
app.module.ts ye ekliyeceğiz.
import { HttpClientModule } from '@angular/common/http'
ve imports içine HttpClientModule ekle
Akabinde veri çekeceğimiz componentimize geliyoruz 
import { HttpClient } from '@angular/common/http' satırını en üste ekliyoruz.

ngOnInit(): void {
      this.http.get<Product[]>("http://localhost:3000/products").subscribe(x=> {
        this.products = x;
      });
  }


--Angular Formları--ngForm--
example uygulamasında product-add-form1
<form #productAddForm="ngForm" (ngsubmit)="add(productAddForm)">
</form>

--Reactive Form--
example uygulamasında product-add-form2
import formbuilder


--validation--
invalid = bir veri girilmemişse
dirty=inputun içine bişey yazdın sildin bu dirty oluyor.
touched= inputun içine girdin bişey yazmadın...
pristine = Form açıldı hiç dokunulmadı bu durumada pristine oluyor
<div *ngIf="name.invalid&&name.dirty" class="alert alert-danger">Ürün adı giriniz</div>
