vs.net 2019 gerekli
odata makalesi
https://medium.com/@sddkal/net-core-ve-odata-controller-13031b587db9
https://devblogs.microsoft.com/odata/asp-net-core-odata-now-available/
https://medium.com/faun/asp-net-core-entity-framework-core-with-postgresql-code-first-d99b909796d7
https://medium.com/@sefikcankanber/automapper-nedir-ne-ama%C3%A7la-kullan%C4%B1l%C4%B1r-a3a2ad1a4d62
https://github.com/Radu-Raicea/Dockerized-Flask/wiki/%5BDocker%5D-Access-the-PostgreSQL-command-line-terminal-through-Docker
https://www.gitignore.io/
https://www.md5hashgenerator.com/

eklenti olarak .net core cross-platform development ekli olması gerekli.
Yeni proje oluştur + asp.net core web application + webapi şablonunu seç
Controller ilk isteğin alındığı yerdir. 


[Route("api/[Controller])]  //domaini karşılar. http://localhost/api/controlleradimiz.
köşel parantez içi Controller parametredir.

ValuesController iyi bir örnektir. Kenarda kalsın.

nette Postman indir kur. post get put delete vs test için kullanılır.

https://caylakyazilimci.com/post/mssql-localdb-kurulumu
yeni localdb kurunca aşağıdaki yola atıyor.
C:\Users\oncell\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB
YEni tablo aç Id ve Name isimli iki alan olsun. Id alanı identity olsun

entityframework, nhibernate, depper


--model--
Projeye sağ click Models isimli klasör oluştur. içine Value isimli bir class ekle
PascalCase kullanmaya özen göster.

public class Value{
    public int Id { get; set; }
    public string Name { get; set; }
}

--dbcontext--
Yeni bir klasör oluştur ismi Data olsun. Contexti buraya atacağız.
Bu klasörün içine DataContext isimli bir class oluştur.
public class DataContext:DbContext den türesin. using Microsoft.EntityFrameworkCore;  nuget dan kur.
class içine ctor yazıp tab ile constractor oluşturacağız.
public DataContext(DbContextOptions<DataContext> options):base(options) {}

constractorun altına public DbSet<Value> Values { get; set; } oluştur.

--appsettings--
appsettings.json a git. Bu mvc deki web.config gibidir.
"ConnectionStrings": {
    "DefaultConnection":"data source=(localdb)\\oncell; initial catalog=SehirRehberi; Trusted_Connection=true"

},

--Startup.cs e gel--
ConfigureServices metoduna gel.
services.AddDbContext<DataContext>(x=>x.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")))

NOT: Model, datacontext, appsetting vs oluşturduktan sonra aşağıdaki komutlarla migration yaparak
tablolarımızı oluşturabiliriz.
PM> enable-migrations
PM> add-migration initial
PM> update-database


--Controller--
add new api controller... Adını Values yap.
class içinde 
private DataContext _context;
public ValuesContoller(DataContext context)
{
    _context = context;
}
ilk get metodunu yazalım.
[HttpGet]
public ActionResult GetValues()
{
    var values = _context.Values.ToList();
    return Ok(values);
}
//ActionResult 200, 400 gibi http cevaplarının dönmesini sağlayabiliriz. ör 200 için return Ok dedik.

https://stackoverflow.com/questions/50935730/asp-net-core-2-1-kestrel-how-to-disable-https

--Cors--
Cors problemi için Startup.cs'a gel.
ConfigureServices metoduna gel ve en sonuna aşağıdaki kodu ekle.
services.AddCors();
Configure metoduna gel aşağıdaki kodu ekle.
app.UseCors(x=>x.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin().AllowCredentials());

yada chromu başlat çalıştırdan aşağıdaki şekilde aç.
chrome.exe --user-data-dir="C:/Chrome dev session" --disable-web-security

--Repository--
Data klasörüne sağ click add new + Interface + adını IAppRepository yap.
public interface IAppRepository
{
    void Add<T>(T entity) where T:class;
    void Delete<T>(T entity) where T : class;
    void SaveAll();

    List<City> GetCities();
    List<Photo> GetPhotosByCity(int id);
    City GetCityById(int cityId);
    Photo GetPhoto(int id);
}

--implementation--
Yine Data klasörüne sağ click + add new class + adı AppRepository yap.
IAppRepository den :IAppRepository den implement olacak.
soldan bir ampül çıkacak. implement interface komutuna tıklıyoruz.
ne kadar tanımlı interdace varsa notimlemen şeklinde ekleyecek.
Tek tek bunları dolduracağız.
public void Add<T>(T entity)
{
    throw new NotImplementedException();
}
contextimizi burayada class içine controllerdaki gibi ekliyoruz
private DataContext _context;
public AppRepository(DataContext context)
{
    _context = context;
}

public void Add<T>(T entity)
{
    _context.Add(entity);
    //throw new NotImplementedException();
}

--api controller oluştur--
class içine AppRepository inject edelim.
private IAppRepository _appRepository;
public CitiesController(IAppRepository appRepository)
{
    _appRepository = appRepository;
}
public ActionResult GetCities()
{
    var cities = _appRepository.GetCities();
    return Ok(cities);
}

--Dto-- data trasformation
Dto veri getirirlen istediğimiz alanları getirebilmemiz için kullanılır.
1.yöntem
var cities = _appRepository.GetCities().Select(x=>x.Name); // bu sadece name alanını listeleyecek.
2.Yöntem
Bunun için proje kökünde Dtos isimli bir klasör aç
yeni bir class oluştur.. adına CityForListDto diyelim.
public class CityForListDto
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string PhotoUrl { get; set; }
    public string Description { get; set; }

}
var cities = _appRepository.GetCities().Select(x=>new CityForListDto{Description =c.Description, Name = c.Name}); 

3.yöntem.
nugettan AutoMapper ve AutoMapper.Extensions kur.
Proje kökünde helpers isimli bir klasör oluştur.
YEni class oluştur adına AutoMapperProfiles ver.
startup.cs de configureservice eklemeyi unutma...
 services.AddAutoMapper();

Ekleme işleminde [FromBody] metoduna postman ile veri gönderirken,
http://localhost:64104/api/cities/add post seçtikten sonra Body seçiyoruz + Raw seçiyoruz. + Json seçiyoruz.
{
    "name:":"İstanbul",
    "description":"taşı toprağı altın",
    "userid":"1"
}
gibi gönderiyoruz.


postgressql vs.code eklentisi.
https://marketplace.visualstudio.com/items?itemName=ms-ossdata.vscode-postgresql
https://gokhanatil.com/2014/09/configuring-oracle-sql-developer-for-postgresql.html

sqldeveloper için driver https://jdbc.postgresql.org/download.html

docker run -d -p 5432:5432 --name oncell -e POSTGRES_USER=oncell -e POSTGRES_PASSWORD=Oncell123 -e POSTGRES_DB=testdb postgres
docker container exec -it oncell bash
psql -d testdb -U  user -W
# \l  //db listesi
# \dt // aktif db talolarını listeler.
# SELECT version();
# \?  //help
# \q  //quit postgres
# createdb VERITABANI_ADI
# \c veritabanı //bir veritabanına bağlanmak.
https://mertcangokgoz.com/postgresql-komut-ve-kisayollari/

--JWT (Json web Token) --
-Microsoft.AspNetCore.Authentication.JwtBearer nuget dan kur.
-Startup.cs e gel ConfigurationServices metodunun en altına
services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme); satırını ekle.
Kodun devamı https://github.com/onselaydin/WebApiTest.git uygulamasında var.
-Akabinde bir extensions yazacağız. Helper Klasöründe var.
appsettings.json dosyasına alttaki gibi token oluştur.
"AppSettings": {
    "Token": "onselyagmur"
  },
-Startup.cs de mvc satırının üstüne app.UseAuthentication(); satırını ekle.

--Resimleri bir yerde tutmak için aşağıdaki servisi kullanıcağız--
https://cloudinary.com/users/register/free
https://cloudinary.com/documentation
nuget dan cloudinaryDotNet official olanı kur.

https://itnext.io/deploy-a-nodejs-and-expressjs-app-on-digital-ocean-with-nginx-and-free-ssl-edd88a5580fa